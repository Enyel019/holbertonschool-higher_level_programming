=======================
2-base_geometry test cases
=======================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

=====
Case1
=====

>>> bg = BaseGeometry()
>>> bg.integer_validator("name", True)
Traceback (most recent call last):
...
TypeError: name must be an integer

=====
Case2
=====
>>> bg = BaseGeometry()
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


=====
Case3
=====
>>> bg = BaseGeometry()
>>> bg.integer_validator("name")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

=====
Case4
=====
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", -5)
Traceback (most recent call last):
...
ValueError: name must be greater than 0

TEST CONDITIONS
===============

testing instantiation
::
>>> print(bg.__dict__)
{}

testing area method
::
>>> try:
...     bg.area()
... except Exception as err:
...     print(err)
area() is not implemented

testing integer_validator method
::
>>> try:
...     bg.integer_validator("x", 1)
... except Exception as err:
...     print(err)

testing integer_validator method with TypeError float
::
>>> try:
...     bg.integer_validator("x", 3.14159)
... except Exception as err:
...     print(err)
x must be an integer

testing integer_validator method with TypeError string
::
>>> try:
...     bg.integer_validator("x", "52")
... except Exception as err:
...     print(err)
x must be an integer

testing integer_validator method with TypeError tuple
::
>>> try:
...     bg.integer_validator("x", (0,))
... except Exception as err:
...     print(err)
x must be an integer

testing integer_validator method with TypeError list
::
>>> try:
...     bg.integer_validator("x", [7])
... except Exception as err:
...     print(err)
x must be an integer

testing integer_validator method with TypeError boolean
::
>>> try:
...     bg.integer_validator("x", True)
... except Exception as err:
...     print(err)
x must be an integer

testing integer_validator method with TypeError set
::
>>> try:
...     bg.integer_validator("x", {8})
... except Exception as err:
...     print(err)
x must be an integer

testing integer_validator method with ValueError negative
::
>>> try:
...     bg.integer_validator("x", -2)
... except Exception as err:
...     print(err)
x must be greater than 0

testing integer_validator method with ValueError zero
::
>>> try:
...     bg.integer_validator("x", 0)
... except Exception as err:
...     print(err)
x must be greater than 0

testing integer_validator method with no arguments
::
>>> try:
...     bg.integer_validator()
... except Exception as err:
...     print(err)
integer_validator() missing 2 required positional arguments: 'name' and 'value'

testing integer_validator method with only one argument
::
>>> try:
...     bg.integer_validator("x")
... except Exception as err:
...     print(err)
integer_validator() missing 1 required positional argument: 'value'

testing integer_validator with None
::
>>> try:
...     bg.integer_validator(None, None)
... except Exception as err:
...     print(err)
None must be an integer
